--------------
PSEUDOCODIFICA
--------------

CONNESSE-BIG(A)
	
	for i=0 to A.length-1
		color[i]=0

	j=0
	for i=0 to A.length-1
		if(color[i]==0)
			j=j+1
			DFS-VISIT(A,i,color,j)

	max_nodi=CONTANODI(A,1,color)
	max_color=1
	for i=2 to j
		attuale_nodi=CONTANODI(A,i,color)
		attuale_color=i;
		if attuale_nodi>max_nodi
			max_nodi=attuale_nodi
			max_color=attuale_color
	
	L=null
	for i=0 to A.length-1
		if color[i]==max_color
			AGGIUNGI-IN-TESTA(L,i)
	return L

DFS-VISIT(A,i,color,j)

	color[i]=j
	x=A[i]
	while x!=null
		v=x.key
		if color[v]==0
			DFS-VISIT(A,v,color,j)
		x=x.next

CONTANODI(A,j,color)

	cont=0
	for i=0 to A.length-1
		if color[i]==j
			cont=cont+1
	return cont

AGGIUNGI-IN-TESTA(L,i)
	temp=null
	temp.info=i
	temp.next=L.head
	L.head=temp
	

--2
Complessità pari a Teta(n)

Nel caso peggiore rappresentato da un albero completo,
abbiamo che AGGIUNGI-IN-TESTA ha complessità Teta(1), 
e solo la visita pesa sulla complessità del programma,
che corrisponde a Teta(n)

----------------
PROGRAMMAZIONE C
----------------

typedef struct elem { 
	stringa nome;      
	struct elem* sx;      
	struct elem* dx;      
} nodo_albero; 
typedef nodo_albero* BTree; 

typedef struct elem2 { 
	stringa nome;
	struct elem2* primofiglio;      
	struct elem2* fratello;      
} nodo_alberoN;        
typedef nodo_alberoN* BNTree; 

int prof_genealogia(Btree T,stringa s);

--1
int affini(BTree T, stringa S){
	int profondità = prof_genealogia(T,S);
	return conta_livello(T,profondità)-1;
}

int conta_livello(Btree T, int h){
	if(T==NULL)
		return 0;
	if(h==0)
		return 1;
	return conta_livello(T->sx,h-1)+conta_livello(T->dx,h-1);
}

--2
int prof_cammino(Btree T, stringa S){
	if(T==NULL)
		return 0;
	int profondità = prof_genealogia(T,S);
	return profondità==(conta_livello(T,profondità)-1);
}

--3
inr conta_figli(BNTree T, int x, int h){
	if(T==NULL)
		return 0;

	int nfigli=0, k=0;
	BNTree temp = T->primofiglio;
	while(temp!=NULL){
		if (h==0)
			nfigli++;
		else		
			k+=conta_figli(temp,x,h-1);
		temp=temp->fratello;
	}
	
	if (h==0)
		return k;
	else
		return nfigli>=x;
}